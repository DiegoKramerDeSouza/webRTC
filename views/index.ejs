<!doctype html>
<html>
	<head>
		<meta charset='utf-8'>
		<meta http-equiv='X-UA-Compatible' content='IE=edge'>
		<meta name='viewport' content='width=device-width, initial-scale=1'>
		<title>Utilizando WebRCT</title>
		
		<script src='/socket.io/socket.io.js'></script>
		<script src='jquery-3.1.1.min.js'></script>
		<link rel='stylesheet' type='text/css' href='style.css' />
		
	</head>
	<body>
		<!--
			<p>Realiza:</p>
			<p>-Transmite áudio e Vídeo P2P;</p>
			<p>-Troca de mensagens via sockets (não seguro);</p>
			<p>-Realiza a verificação de acesso com signaling_room;</p>
			<p>-Verifica a existência de cameras em cada lado;</p>
			<p>-Troca de mensagens via data channel (seguro);</p>
			<p>-Envio de arquivos via data channel (divisão de arquivos em chunks de 16KB);</p>
		-->
		<div align='center'>
			<div id='theirVT'>
				<video id='theirVideoTag' class='mainVideo' autoplay></video>
			</div>
			<div id='myVT'>
				<video id='myVideoTag' class='subVideo' control muted autoplay></video>	
			</div>
		</div>
		
		<div>
			<form id='formChat' action='#'>
				<label>Name</label>
				<input id='myname' type='text' />
				<label>Message</label>
				<input id='mymessage' type='text' />
				<input id='sendmessage' type='submit' />
			</form>
			<hr />
			<div>
				<input type="file" id='sendFile' />
				<progress id='fileProgress' value='1' max='100'></progress>
				<div id='downloadFile'>
					<a id='receiveFileLink'></a>
				</div>
			</div>
			<div id='chatarea'>
				Message Output:
				<br />
			</div>
			<hr />
			<div id='signalingArea' style='border: 1px solid black;'>
				<br />
			</div>
		</div>
		
		<script>
			//VARIÁVEIS
			//##########################################################################
			//Colors-----------------
			var myColor = setColor();
			//-----------------------
			
			//Controle de quantas cameras detectadas
			var cameras = false;
			
			//File send tags
			var sendFile = document.querySelector("input#sendFile");
			var fileProgress = document.querySelector("progress#fileProgress");
			//var downloadLink = document.querySelector("a#receiveFileLink");
			var downloadFile = document.querySelector("#downloadFile");
			
			//Video and chat tags
			var myVideoArea = document.querySelector("#myVideoTag");
			var myVT = document.querySelector("#myVT");
			var theirVideoArea = document.querySelector("#theirVideoTag");
			var theirVT = document.querySelector("#theirVT");
			var myName = document.querySelector('#myname');
			var myMessage = document.querySelector('#mymessage');
			var sendMessage = document.querySelector('#sendmessage');
			var formChat = document.querySelector('#formChat');
			var chatArea = document.querySelector('#chatarea');
			var signalingArea = document.querySelector('#signalingArea');
			
			//Rooms criadas no 'ready' do server.js
			var ROOM = "chat";
			var SIGNAL_ROOM = "signal_room";
			var FILES_ROOM = "files";
			
			//Configurações de STUN servers para o signaling
			var rtcPeerConn;
			var configuration = {
				'iceServers': [
					{urls:'stun:stun.l.google.com:19302'},
					//{urls:'stun:stun1.l.google.com:19302'},
					{urls:'stun:stun2.l.google.com:19302'}
					//{urls:'stun:stun3.l.google.com:19302'},
					//{urls:'stun:stun4.l.google.com:19302'}
				]
			};
			
			
			//Data channel********
			var dataChannel;
			var dataChannelOptions = {
				ordered: true, //não garante a entrega dos dados mas é mais rápido
				maxRetransmitTime: 1000 // tempo máximo para retransmitir milisegundos
			};
			
			//File room
			var receiveFileName;
			var receiveFileSize;
			var fileBuffer = [];
			var fileSize = 0;
			
			console.log("00: " + receiveFileSize);
			
			//##########################################################################
			
			
			//IO - LISTENERS
			//##########################################################################
			io = io.connect();
			//Mensagem para a rota 'ready' para fazer o JOIN das ROOMs
			io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM, "files_room": FILES_ROOM});
			
			//Tratamento de mensagem de broadcast
			io.on('announce', function(data){
				displayMessage(data.message);
			});
			//Tratamento de mensagem de por pessoa
			io.on('message', function(data){
				displayMessage("<b style='color: rgb(" + data.color + ");'>" + data.author + ":</b> " + data.message);
			});
			//Signaling Messages
			io.emit('signal', {"type":"user_here", "message":"Você está pronto para a chamada?", "room":SIGNAL_ROOM});
			io.on('signaling_message', function(data){
				displayMessage("Sinal recebido: " + data.type);
				
				//Setup do objeto de conexão RTC Peer
				if(!rtcPeerConn)
					startSignaling();
					
				if(data.type != "user_here"){
					var message = JSON.parse(data.message);
					if(message.sdp){
						rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function(){
							//Se recebermos uma oferta, temos que responder
							if(rtcPeerConn.remoteDescription.type == 'offer'){
								rtcPeerConn.createAnswer(sendLocalDesc, logError);
							}
						}, logError);
					} else {
						rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
					}
				}
			});
			
			//Chat - Send
			formChat.addEventListener('submit', function(ev){
				io.emit('send', {"author":myName.value, "message":myMessage.value, "color":myColor, "room":ROOM});
				
				//Data channel********
				//dataChannel.send("<b style='color: rgb(" + myColor + ");'>" + myName.value + "</b> says " + myMessage.value);
				
				myMessage.value = "";
				ev.preventDefault();
			}, false);
			
			//File room
			io.on('files', function(data){
				receiveFileName = data.filename;
				receiveFileSize = data.filesize;
				console.log("01: " + receiveFileSize);
				displaySignalMessage("websockets says the file on it's way is "+receiveFileName+" (" + receiveFileSize + ")");
				
				//Disponibiliza link para download do arquivo
				if(fileSize === receiveFileSize){
					displayMessage("File transfer done!");
					var received = new window.Blob(fileBuffer);
					fileBuffer = [];
					downloadFile.innerHTML = "<a id='receiveFileLink'></a>";
					
					var downloadLink = document.querySelector("a#receiveFileLink");
					downloadLink.href = URL.createObjectURL(received);
					downloadLink.download = receiveFileName;
					downloadLink.appendChild(document.createTextNode(receiveFileName + "(" + receiveFileSize + ") bytes"));
					fileSize = 0;
				}
				
			});
			sendFile.addEventListener('change', function(ev){
				var file = sendFile.files[0];
				displaySignalMessage("Sending file " + file.name + " (" + file.size + ")...");
				io.emit('files', {"filename":file.name, "filesize":file.size, "room":FILES_ROOM});
				
				//Divite o arquivo em chunks de 16KB cada
				fileProgress.max = file.size;
				var chunkSize = 16384;
				var sliceFile = function(offset){
					var reader = new window.FileReader();
					reader.onload = (function(){
						return function(e){
							dataChannel.send(e.target.result);
							//Update progress bar
							if(file.size > offset + e.target.result.byteLength){
								window.setTimeout(sliceFile, 0, offset + chunkSize);
							}
							fileProgress.value = offset + e.target.result.byteLength;
						};
					})(file);
					var slice = file.slice(offset, offset + chunkSize);
					reader.readAsArrayBuffer(slice);
				};
				sliceFile(0);
			}, false);
			
			//##########################################################################
			
			
			
			//FUNÇÕES
			//##########################################################################
			function getCameras(sourceInfos){
				if(sourceInfos.length > 0){
					cameras = true;
				}
			}
			function displayMessage(message){
				chatArea.innerHTML = chatArea.innerHTML + "<br />" + message;
			}
			function displaySignalMessage(message){
				signalingArea.innerHTML = signalingArea.innerHTML + "<br />" + message;
			}
			
			function setColor(){
				var blue = Math.floor((Math.random() * 150) + 20);
				var red = Math.floor((Math.random() * 150) + 20);
				var green = Math.floor((Math.random() * 150) + 20);
				var color = red+","+green+","+blue;
				return color;
			}
			
			//Signaling Messages==============================================
			function startSignaling(){
				displaySignalMessage('Iniciando signaling...');
				
				//Data channel********
				rtcPeerConn = new RTCPeerConnection(configuration, null);
				
				//rtcPeerConn = new RTCPeerConnection(configuration);
				//rtcPeerConn = new webkitRTCPeerConnection(configuration);
				
				//Data channel********
				dataChannel = rtcPeerConn.createDataChannel('textMessages', dataChannelOptions);
				//Event handlers
				dataChannel.onopen = dataChannelStateChanged;
				rtcPeerConn.ondatachannel = receiveDataChannel;
				
				//Envia qualquer ICE candidates para o outro Peer
				rtcPeerConn.onicecandidate = function(evt){
					if(evt.candidate){
						io.emit('signal',{"type":"ice candidate", "message":JSON.stringify({'candidate': evt.candidate}), "room": SIGNAL_ROOM});
						displaySignalMessage("Concluído ice candidate...");
					}
				};
				//let the 'negotiationneeded' event trigger offer generation
				rtcPeerConn.onnegotiationneeded = function(){
					displaySignalMessage("Negociação de chamada");
					rtcPeerConn.createOffer(sendLocalDesc, logError);
				};
				//quando a stream remota chega, exibe o conteúdo no elemento vídeo
				rtcPeerConn.onaddstream = function(evt){
					displaySignalMessage("Adicionando 'Their' stream...");
					theirVideoArea.src = URL.createObjectURL(evt.stream);
					console.log(theirVideoArea.src);
				};
				
				navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia
				navigator.mediaDevices.enumerateDevices(getCameras);
				if(cameras){
					navigator.getUserMedia({
						'audio': true,
						'video': {
							mandatory: {
								minWidth: 240,
								maxWidth: 240,
								minHeight: 240,
								maxHeight: 240
							}
						}
					}, function(stream){
						displaySignalMessage("Adicionando My stream...");
						myVideoArea.src = URL.createObjectURL(stream);
						myVideoArea.className = "grayscale_filter";
						rtcPeerConn.addStream(stream);
					}, logError);
				} else {
					navigator.getUserMedia({
						'audio': true
					}, function(stream){
						displaySignalMessage("Adicionando voz...");
						//myVideoArea.src = URL.createObjectURL(stream);
						myVT.className = "black_background";
						myVT.innerHTML = "<p style='color:white;'>No Video</p>";
						rtcPeerConn.addStream(stream);
					}, logError);
				}
				
			}
			
			//Data channel********
			//Data Channel handlers---------------------------------------
			function dataChannelStateChanged(){
				if(dataChannel.readyState === "open"){
					displaySignalMessage("Data Channel open");
					dataChannel.onmessage = receiveDataChannelMessage;
				}
			}
			function receiveDataChannel(event){
				displaySignalMessage("Receiving a data channel");
				dataChannel = event.channel;
				dataChannel.onmessage = receiveDataChannelMessage;
			}
			function receiveDataChannelMessage(event){
				//displaySignalMessage("Incoming Message");
				//displayMessage("From DataChannel: " + event.data);
				
				//Process incoming files
				fileBuffer.push(event.data);
				fileSize += event.data.byteLength;
				fileProgress.value = fileSize;
				console.log(fileSize + "/" + receiveFileSize);
				
				/*
				//NÂO UTILIZADO
				//Disponibiliza link para download do arquivo
				if(fileSize === receiveFileSize){
					displayMessage("File transfer done!");
					var received = new window.Blob(fileBuffer);
					fileBuffer = [];
					downloadLink.href = URL.createObjectURL(received);
					downloadLink.download = receiveFileName;
					downloadLink.appendChild(document.createTextNode(receiveFileName + "(" + fileSize + ") bytes"));
				}
				*/
				
			}
			//-----------------------------------------------------------
			
			function sendLocalDesc(desc){
				rtcPeerConn.setLocalDescription(desc, function(){
					displaySignalMessage("Enviando Local description...");
					io.emit('signal',{"type":"SDP", "message":JSON.stringify({'sdp':rtcPeerConn.localDescription }), "room": SIGNAL_ROOM });
				}, logError);
			}
			
			function logError(error){
				displaySignalMessage(error.name + ": " + error.message);
			}
			//=================================================================
			//##########################################################################
			
			
		</script>
	</body>
</html>